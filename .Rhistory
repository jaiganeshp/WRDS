val <- val + ((acc.balance - wealth[lower]) *
((v[upper,i+1]-v[lower,i+1])/(wealth[upper]-wealth[lower]))) + v[lower,i+1]
}
}
#Getting the mix value at each stage and comparing it with the best solution
mixV[k] = (val)/length(AssetReturns[,1])
if(mixV[k] > Best){
Best = mixV[k]
BestDecision = k
}
}
#Assing values to utility and the decision table
v[j,i] = Best
D[j,i] = BestDecision
}
}
}
v[wealth == 950,age ==65];D[wealth == 950,(age ==65)[-16]]
v[wealth == 1100,age ==62] ;D[wealth == 1100,(age ==62)[-16]]
v[wealth == 900,age ==57];D[wealth == 900,(age ==57)[-16]]
v[wealth == 500,age ==57] ;D[wealth == 500,(age ==57)[-16]]
v[wealth == 400,age ==55] ;D[wealth == 400,(age ==55)[-16]]
v[wealth == 500,age ==52] ;D[wealth == 500,(age ==52)[-16]]
90/50
as.integer(90/50)
acc.balance <- 500
savings<- getSalary(52) * 0.16
mix.selected <-mix[,1]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance/50)
desicion[l] <- D[d,age==53]
}
age==53
desicion[l] <- D[d,(age==53)[-1]]
acc.balance <- 500
savings<- getSalary(52) * 0.16
mix.selected <-mix[,1]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance/50)
desicion[l] <- D[d,(age==53)[-1]]
}
acc.balance <- 500
savings<- getSalary(52) * 0.16
mix.selected <-mix[,1]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
decision <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance/50)
desicion[l] <- D[d,(age==53)[-1]]
}
acc.balance <- 500
savings<- getSalary(52) * 0.16
mix.selected <-mix[,1]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
decision <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance/50)
decision[l] <- D[d,(age==53)[-1]]
}
acc.balance <- 500
savings<- getSalary(52) * 0.16
mix.selected <-mix[,1]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
decision <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance[l]/50)
decision[l] <- D[d,(age==53)[-1]]
}
decision
end.balance
getNextStepDecision<-function(acc.balance, client.age, D, mix.num){
savings<- getSalary(client.age) * 0.16
mix.selected <-mix[,mix.num]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
decision <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance[l]/50)
decision[l] <- D[d,(age==client.age)[-1]]
}
cbind(end.balance, decision)
}
getNextStepDecision(950,65,1)
age==client.age
getNextStepDecision(950,65,D,1)
getNextStepDecision(400,55,D,1)
getNextStepDecision(1100,62,D,1)
getNextStepDecision(900,57,D,1)
getNextStepDecision(1100,62,D,1)
getNextStepDecision(500,57,D,1)
View(D)
getNextStepDecision(900,57,D,1)
getNextStepDecision(1100,62,D,1)
View(D)
rownames(v)<- wealth
colnames(v)<- age
rownames(D)<- wealth
colnames(D)<- age[-1]
View(D)
v["950","65"]
getNextStepDecision(950,65,D,1)
getNextStepDecision(400,55,D,1)
summarise(getNextStepDecision(1100,62,D,1))
range(getNextStepDecision(1100,62,D,1))
getNextStepDecision(900,57,D,1)
getNextStepDecision(500,57,D,1)
getNextStepDecision(500,52,D,1)
getNextStepDecision(500,52,D,1)
next step for each client
getNextStepDecision<-function(acc.balance, client.age, D, mix.num){
savings<- getSalary(client.age) * 0.16
mix.selected <-mix[,mix.num]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
decision <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance[l]/50)
decision[l] <- D[d,(age==client.age)[-16]]
}
cbind(end.balance, decision)
}
getNextStepDecision(500,52,D,1)
getNextStepDecision(900,57,D,1)
getNextStepDecision(950,65,D,1)
v["950","65"];D["950","65"]
(ffv <- v["950","65"]; ffd <- D["950","65"])
(ffv <- v["950","65"]); (ffd <- D["950","65"])
matplot(getNextStepDecision(950,65,D,1))
ror
(ffn <- getNextStepDecision(950,65,D,1))
quantile(ffn)
ffn[which.min(ffn[1,]),]
ffn[which.max(ffn[1,]),]
?ddply
library("plyr")
?ddply
head(ffn)
ddply(ffn, summarise,decision,fun=mean(end.balance) )
ddply(ffn,decision,summarise,fun=mean(end.balance))
ddply(ffn,.decision,summarise,fun=mean(end.balance))
ffn
ddply(ffn,.decision,summarise,avg.balance=mean(end.balance))
ddply(ffn,.(decision),summarise,avg.balance=mean(end.balance))
ddply(ffn,~decision,summarise,avg.balance=mean(end.balance))
ffn
ddply(data.frame(ffn),~decision,summarise,avg.balance=mean(end.balance))
ddply(data.frame(ffn),decision,summarise,avg.balance=mean(end.balance))
ddply(data.frame(ffn),.decision,summarise,avg.balance=mean(end.balance))
ddply(data.frame(ffn),~decision,summarise,avg.balance=mean(end.balance))
ffn.summary <- ddply(data.frame(ffn),~decision,summarise,avg.balance=mean(end.balance))
(dv <- v["1100","62"]); (dd <- D["1100","62"])
(dn <- getNextStepDecision(950,65,D,1))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
(fn.summary <- ddply(data.frame(fn),~decision,summarise,avg.balance=mean(end.balance)))
(fv <- v["950","65"]); (fd <- D["950","65"])
(fn <- getNextStepDecision(950,65,D,1))
(fn.summary <- ddply(data.frame(fn),~decision,summarise,avg.balance=mean(end.balance)))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
(dn <- getNextStepDecision(1100,62,D,1))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
dn
(ev <- v["1100","62"]); (ed <- D["1100","62"])
(en <- getNextStepDecision(1100,62,D,1))
(en.summary <- ddply(data.frame(en),~decision,summarise,avg.balance=mean(end.balance)))
#Darrin Dorne
(dv <- v["500","57"]); (dd <- D["500","57"])
(dn <- getNextStepDecision(500,57,D,1))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
#Carla Clausen
(cv <- v["900","57"]); (cd <- D["900","57"])
(cn <- getNextStepDecision(900,57,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
#Bob Brown
(bv <- v["400","55"]); (bd <- D["400","55"])
(bn <- getNextStepDecision(400,55,D,1))
(bn.summary <- ddply(data.frame(bn),~decision,summarise,avg.balance=mean(end.balance)))
#Amy Abrams
(av <- v["500","52"]); (ad <- D["500","52"])
(an <- getNextStepDecision(500,52,D,1))
(an.summary <- ddply(data.frame(an),~decision,summarise,avg.balance=mean(end.balance)))
(an.summary <- ddply(data.frame(an),~decision,summarise,avg.balance=mean(end.balance)))
(bn.summary <- ddply(data.frame(bn),~decision,summarise,avg.balance=mean(end.balance)))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
(en.summary <- ddply(data.frame(en),~decision,summarise,avg.balance=mean(end.balance)))
(fn.summary <- ddply(data.frame(fn),~decision,summarise,avg.balance=mean(end.balance)))
setwd("D:/CFRM/Autumn 2014/cfrm 555/week 10/project 3")
write.csv(fn.summary, "fn.csv")
(ev <- v["1100","62"]); (ed <- D["1100","62"])
ror
(en.summary <- ddply(data.frame(en),~decision,summarise,avg.balance=mean(end.balance)))
(en1 <- getNextStepDecision(1200,63,D,1))
(en.summary <- ddply(data.frame(en),~decision,summarise,avg.balance=mean(end.balance)))
(en.summary <- ddply(data.frame(en1),~decision,summarise,avg.balance=mean(end.balance)))
ror
(dv <- v["500","57"]); (dd <- D["500","57"])
(dn <- getNextStepDecision(500,57,D,1))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
(dn <- getNextStepDecision(550,58,D,1))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
(cv <- v["900","57"]); (cd <- D["900","57"])
(cn <- getNextStepDecision(900,57,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(988,58,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(1083,59,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(1186,60,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(1298,61,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(1419,62,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(1550,63,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
(cn <- getNextStepDecision(900,57,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
ror
(bv <- v["400","55"]); (bd <- D["400","55"])
(bn <- getNextStepDecision(400,55,D,1))
(bn.summary <- ddply(data.frame(bn),~decision,summarise,avg.balance=mean(end.balance)))
(av <- v["500","52"]); (ad <- D["500","52"])
(an <- getNextStepDecision(500,52,D,1))
(an.summary <- ddply(data.frame(an),~decision,summarise,avg.balance=mean(end.balance)))
ror
###Function to Generate the AssetReturns Based on the TreeStructure and TimeHorizonStructure
getAssetReturns<-function(TreeStructure, TimeHorizonStructure)
{
# Branching structure for tree
# This example creates a collection of paths since there
# is only branching at the beginning
#TreeStructure <- c(10,1,1,1,1,1)
# Time horizon pattern.  Make sure it adds up to (retirement age - starting age)
# and that it is of same length as TreeStructure
# This example has a 15-year period followed by 5 5-year periods
#TimeHorizonStructure <- c(15,5,5,5,5,5)
# return assumptions
AssetNames <- c("US Equity", "Int'l Equity", "Emer Mkt Equity", "Global RE", "Agg Fixed", "Hedge Fund","Cash")
ret_vec <- c(0.06, 0.059, 0.07, 0.056, 0.019, 0.052, 0.0315)
stdev_vec <- c(0.191, 0.202, 0.268, 0.207, 0.038, 0.07, 0.058)
correl_mat <- rbind(c(1.00, 0.74, 0.67, 0.74, 0.13, 0.47, 0.02),
c(0.74, 1.00, 0.70, 0.78, 0.09, 0.46, 0.00),
c(0.67, 0.70, 1.00, 0.66, 0.07, 0.45, -0.03),
c(0.74, 0.78, 0.66, 1.00, 0.10, 0.37, -0.03),
c(0.13, 0.09, 0.07, 0.10, 1.00, 0.10, 0.10),
c(0.47, 0.46, 0.45, 0.37, 0.10, 1.00, 0.55),
c(0.02, 0.00, -0.03, -0.03, 0.10, 0.55, 1.00))
cov_mat <- diag(stdev_vec) %*% correl_mat %*% diag(stdev_vec)
# Construct tree structure
# An array indicating the first node at each model stage
FirstNodeAtStage = array(1,dim=c(length(TreeStructure)+1))
# An array indicating the last node at each model stage
LastNodeAtStage = array(1,dim=c(length(TreeStructure)+1))
# An array indicating the number of nodes at each model stage
NodesAtStage = array(1,dim=c(length(TreeStructure)+1))
# Counter of total number of nodes in the scenario tree
TotalNodes = 1
for(i in 2:(length(TreeStructure)+1))
{
FirstNodeAtStage[i] = LastNodeAtStage[i-1] + 1
NodesAtStage[i] = NodesAtStage[i-1] * TreeStructure[i-1]
LastNodeAtStage[i] = FirstNodeAtStage[i] + NodesAtStage[i] - 1
TotalNodes = TotalNodes + NodesAtStage[i]
}
# An array indicating the parent node of each node, that is the immediately preceding node
ParentNode = array(0,dim=c(length(TotalNodes)))
# An array indicating the first child node of each node
FirstChild = array(2,dim=c(length(TotalNodes)))
# An array indicating the last child node of each node
LastChild = array(TreeStructure[1]+1,dim=c(length(TotalNodes)))
# An array indicating the stage at which each node occurs
NodeStage = array(1,dim=c(length(TotalNodes)))
# loop over each node that is a parent of some other node
for(i in 1:LastNodeAtStage[length(TreeStructure)])
{
# loop over each child of node i
for(j in FirstChild[i]:LastChild[i])
{
# assign parent, stage and children
ParentNode[j] = i
NodeStage[j] = NodeStage[ParentNode[j]] + 1
if(NodeStage[j] <= length(TreeStructure))
{
FirstChild[j] = LastChild[j-1]+1
LastChild[j] = FirstChild[j] + TreeStructure[NodeStage[j]] - 1
}
}
}
#  Construct Scenarios of Asset Returns
# allocate space for array to hold scenario outcomes
AssetReturns = array(0,dim=c(TotalNodes,length(AssetNames)))
# set seed for random number generator so same random draw can be created on subsequent runs
for(nperiod in 1:length(TreeStructure))
{
# calculate mean and standard deviation of associated normal distribution of ln(1+return)
period_cc_stdev_vec = sqrt(log(1 + stdev_vec^2 / (1 + ret_vec)^2))
period_cc_ret_vec = log(1+ret_vec) - period_cc_stdev_vec^2/2
# scale normal statistics to annual period length
period_cc_stdev_vec = period_cc_stdev_vec * sqrt(TimeHorizonStructure[nperiod])
period_cc_ret_vec = period_cc_ret_vec * TimeHorizonStructure[nperiod]
# Not technically correct calculation of covariance matrix, but so close for annual time steps
# that we'll never notice any difference
period_cc_cov_mat = diag(period_cc_stdev_vec) %*% correl_mat %*% diag(period_cc_stdev_vec)
# create draw from multi-variate normal distribution
AssetReturns[FirstNodeAtStage[nperiod+1]:LastNodeAtStage[nperiod+1],1:length(AssetNames)] =
mvrnorm(LastNodeAtStage[nperiod+1] - FirstNodeAtStage[nperiod+1] + 1, period_cc_ret_vec,period_cc_cov_mat)
# calculate returns from random draws of ln(1+return)
AssetReturns[FirstNodeAtStage[nperiod+1]:LastNodeAtStage[nperiod+1],1:length(AssetNames)] =
exp(AssetReturns[FirstNodeAtStage[nperiod+1]:LastNodeAtStage[nperiod+1],1:length(AssetNames)]) - 1
}
AssetReturns
}
#Function to get the Uitlity value at the Final Stage
getUtility<-function(w, Target){
gamma <-0.02
if(w>=1.2*Target){
return (w)
}else if(w>=0.8* Target){
return (w- gamma*(1.2*Target - w)^2)
}else{
return (w- gamma*((1.2 - 0.8)^2)*Target^2)
}
}
###Function to return the salary###
getSalary<-function(age){
return (60 + (age - 27))
}
#Function to generate a set of scenario's for next step for each client
getNextStepDecision<-function(acc.balance, client.age, D, mix.num){
savings<- getSalary(client.age) * 0.16
mix.selected <-mix[,mix.num]
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
mixret<-rep(0,length(AssetReturns[,1]))
end.balance <- rep(0,length(AssetReturns[,1]))
decision <- rep(0,length(AssetReturns[,1]))
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix.selected)
end.balance[l] <- (acc.balance + savings) * (1+mixret[l])
d<-as.integer(end.balance[l]/50)
decision[l] <- D[d,(age==client.age)[-16]]
}
cbind(end.balance, decision)
}
library("MASS")
#Input Parameters
age<-52:67
#Creating wealth as a sequence from 50k to 5000k with an increment of 50K
wealth <- seq(50, 5000, by=50)
#Defining V and D matrix
v<-array(0,dim=c(length(wealth),length(age)))
D<-array(0,dim=c(length(wealth),length(age)-1))
#Defining Target Return
Target<-1250
#Inputting the weights of various mixes
mix<-rbind(c(0.3, 0.25, 0.25, 0.23, 0.21, 0.16, 0.13, 0.08),
c(0.3, 0.25, 0.21, 0.19, 0.15, 0.12, 0.09, 0.06),
c(0.1, 0.10, 0.08, 0.06, 0.04, 0.04, 0.02, 0.01),
c(0.1, 0.10, 0.08, 0.06, 0.05, 0.04, 0.03, 0.02),
c(0.1, 0.20, 0.30, 0.40, 0.45, 0.50, 0.55, 0.51),
c(0.1, 0.10, 0.08, 0.06, 0.05, 0.04, 0.03, 0.02),
c(0.0, 0.00, 0.00, 0.00, 0.05, 0.10, 0.15, 0.30))
#Looping through different age's
for (i in length(age):1){
#Getting the amount of saving at each age
savings<- getSalary(age[i]) * 0.16
#Looping through all the account balances
for(j in 1:length(wealth)){
#Getting the utility function value when it is age 67,
#else finding the best mix and utility value
if(age[i]==67){
v[j,i] = getUtility(wealth[j],Target)
} else{
Best = -Inf
BestDecision = 1
#Simulating 100 asset returns for one stage
set.seed(1234)
AssetReturns <- getAssetReturns(100,1)
AssetReturns <- AssetReturns[-1,]
#Saving the utility value of each mix in mixV and return for each mix in mixret
mixV<-rep(0,length(mix[1,]))
mixret<-rep(0,length(AssetReturns[,1]))
#Looping through all the mixes
for (k in 1:length(mix[1,])){
val <- 0
#looping through all the asset returns
for(l in 1:length(AssetReturns[,1])){
mixret[l]<-sum(AssetReturns[l,] * mix[,k])
acc.balance <- (wealth[j] + savings) * (1+mixret[l])
#Interpolating the values based on the acc.balance at each stage
#If the account balance is greater than 5000K,
#then using the value of maximum expected utility from previous stage, else if it is
#less than 50k then using the least expected utility value. Otherwise interpolating the
#values linearly.
if(acc.balance > 5000){
val <- val + v[100,i+1]
} else if(acc.balance < 50){
val <- val + v[1,i+1]
}else if(acc.balance%%50 == 0){
num<-acc.balance/50
val<-val + v[num,i+1]
}else{
lower <- as.integer(acc.balance/50)
upper <- lower + 1
val <- val + ((acc.balance - wealth[lower]) *
((v[upper,i+1]-v[lower,i+1])/(wealth[upper]-wealth[lower]))) + v[lower,i+1]
}
}
#Getting the mix value at each stage and comparing it with the best solution
mixV[k] = (val)/length(AssetReturns[,1])
if(mixV[k] > Best){
Best = mixV[k]
BestDecision = k
}
}
#Assing values to utility and the decision table
v[j,i] = Best
D[j,i] = BestDecision
}
}
}
rownames(v)<- wealth
colnames(v)<- age
rownames(D)<- wealth
colnames(D)<- age[-1]
library("plyr")
#Get Results
#Francine Fransworth
(fv <- v["950","65"]); (fd <- D["950","65"])
(fn <- getNextStepDecision(950,65,D,1))
(fn.summary <- ddply(data.frame(fn),~decision,summarise,avg.balance=mean(end.balance)))
#Eric Evans
(ev <- v["1100","62"]); (ed <- D["1100","62"])
(en <- getNextStepDecision(1100,62,D,1))
(en.summary <- ddply(data.frame(en),~decision,summarise,avg.balance=mean(end.balance)))
#Darrin Dorne
(dv <- v["500","57"]); (dd <- D["500","57"])
(dn <- getNextStepDecision(500,57,D,1))
(dn.summary <- ddply(data.frame(dn),~decision,summarise,avg.balance=mean(end.balance)))
#Carla Clausen
(cv <- v["900","57"]); (cd <- D["900","57"])
(cn <- getNextStepDecision(900,57,D,1))
(cn.summary <- ddply(data.frame(cn),~decision,summarise,avg.balance=mean(end.balance)))
#Bob Brown
(bv <- v["400","55"]); (bd <- D["400","55"])
(bn <- getNextStepDecision(400,55,D,1))
(bn.summary <- ddply(data.frame(bn),~decision,summarise,avg.balance=mean(end.balance)))
#Amy Abrams
(av <- v["500","52"]); (ad <- D["500","52"])
(an <- getNextStepDecision(500,52,D,1))
(an.summary <- ddply(data.frame(an),~decision,summarise,avg.balance=mean(end.balance)))
library(WRDS)
library(WRDS)
?WRDS
getFundamentalReturnQuery()
getadditionalFundamentalReturn()
getFundamental.aligned()
library(WRDS)
getFundamental.aligned()
getFundamentalReturnQuery()
getFundamentalReturn()
